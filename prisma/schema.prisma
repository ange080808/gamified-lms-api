// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

enum Role {
  Admin
  Student
  Teacher
}

model User {
  id         String  @id @default(uuid())
  username   String  @unique
  password   String
  role       Role
  firstName  String
  lastName   String?
  middleName String?
  age        Int
  gender     String
  address    String?
  email      String?
  uniqueId   String  @unique
  profileUrl String?
  avatar     String?
  expPoints  Int     @default(0)
  level      Int     @default(1)
  teacherId  String?
  teacher    User?   @relation(name: "TeacherStudents", fields: [teacherId], references: [id], onDelete: SetNull)
  students   User[]  @relation(name: "TeacherStudents")

  createdAt       DateTime          @default(now())
  updatedAt       DateTime          @updatedAt
  StudentLesson   StudentLesson[]
  StudentActivity StudentActivity[]
}

model Module {
  id          String  @id @default(uuid())
  name        String  @unique
  description String
  imageUrl    String
  isOpen      Boolean @default(false)

  lessons Lesson[]

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Lesson {
  id          String  @id @default(uuid())
  name        String
  description String
  content     String  @unique
  points      Int
  isOpen      Boolean @default(false)

  moduleId String
  module   Module @relation(fields: [moduleId], references: [id], onDelete: Cascade)

  createdAt     DateTime        @default(now())
  updatedAt     DateTime        @updatedAt
  StudentLesson StudentLesson[]
}

model StudentLesson {
  id          String  @id @default(uuid())
  studentId   String
  student     User    @relation(fields: [studentId], references: [id], onDelete: Cascade)
  lessonId    String
  lesson      Lesson  @relation(fields: [lessonId], references: [id], onDelete: Cascade)
  isCompleted Boolean @default(true)

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Video {
  id          String  @id @default(uuid())
  name        String
  description String
  link        String
  isOpen      Boolean @default(false)

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Activity {
  id          String  @id @default(uuid())
  name        String  @unique
  description String
  content     String
  imageUrl    String
  isOpen      Boolean @default(false)
  points      Int

  createdAt       DateTime          @default(now())
  updatedAt       DateTime          @updatedAt
  StudentActivity StudentActivity[]
}

model StudentActivity {
  id          String   @id @default(uuid())
  studentId   String
  student     User     @relation(fields: [studentId], references: [id], onDelete: Cascade)
  activityId  String
  activity    Activity @relation(fields: [activityId], references: [id], onDelete: Cascade)
  score       Int
  isCompleted Boolean  @default(true)

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}
